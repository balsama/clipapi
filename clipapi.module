<?php
  // show errors
  if (!defined('E_STRICT')) { define('E_STRICT', 2048); } // E_STRICT isn't defined in PHP 4
  error_reporting(E_ALL | E_STRICT);
  ini_set('display_errors', '1');         //
  ini_set('display_startup_errors', '1'); //
  ini_set('track_errors', '1');           // store last error in $php_errormsg
  ini_set('html_errors', '0');            // don't output html links in error messages
  ini_set('log_errors', '1');
  ini_set('error_log', dirname(__FILE__) . '/_php_error.log');
  // end: show errors

include('clipapi.cipher.inc');

/**
 * Implements hook_menu()
 *
 * Defines two pages. Once for the XML itself and one for the config form
 */
function clipapi_menu() {
  $items['clip-xml/%'] = array(
    'title' => t('http requests'),
    'page callback' => 'clipapi_xml',
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/clipapi'] = array(
    'title' => 'CLIP API Settings',
    'description' => 'Configure CLIP cipher and account variables',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clipapi_admin'),
    'access arguments' => array('administer clip api settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'clipapi.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function clipapi_perm() {
  return array('administer clip api settings');
}

/**
 * Generates the contents of /clip-xml/[ServiceName]
 *
 * Calls clip options which calls CLIP API and formats and returns the results.
 */
function clipapi_xml() {
  $service = check_plain(arg(1));
  if (empty($service)) {
    $contents = format_xml_elements(array('error' => 'Please specify a service'));
  }
  $contents = clip_options($service);
  if ($contents == FALSE) {
    $contents = format_xml_elements(array('error' => 'Unsupported Service'));
    watchdog('CLIP API', 'Unsupported service called: @service', array('@service' => arg(1)));
  }
  drupal_set_header('Content-Type: text/xml; charset=utf-8');
  print $contents;
}

/**
 * @param string $requested_service
 *   Valid CLIP API service to call, e.g 'GetOffers'.
 * @param boolean $process
 *   (optional) Whether or not to actually make the call to the API or just
 *   return the definition of the service.
 *
 * @return
 *   Definition of the service if $process is set to true, else calls the
 *   clip_process() function.
 */
function clip_options($requested_service, $process = TRUE) {
  $browscap = get_browser($_SERVER['HTTP_USER_AGENT']);
  $base_query = array(
    'sPartnerToken' => '8038e590-58b9-4deb-86fa-9638c3b94e6e',
    'nPID' => '16721',
  );

  $services['GetCategories'] = array(
  );

  $services['GetOffers'] = array(
    'options' => array(
      'query' => array(
        'sPartnerToken' => '8038e590-58b9-4deb-86fa-9638c3b94e6e',
        'nPID' => '16721',
      ),
    ),
    'service' => array(
      'engine' => 'OffersEngine.asmx',
      'service' => 'GetOffers',
    ),
  );

  $services['GetDetectScript'] = array(
    'options' => array(
      'query' => array(
        'sPartnerToken' => '8038e590-58b9-4deb-86fa-9638c3b94e6e',
        'nPID' => '16721',
        'operatingSystem' => $browscap->platform,
        'browser' => $browscap->browser,
        'majorVer' => $browscap->majorver,
        'minorVer' => $browscap->minorver,
        'callBackFunc' => 'GetDeviceID',
        'autoInitiate' => 'true',
        'MACSecondPage' => NULL,
      ),
      'external' => TRUE,
    ),
    'service' => array(
      'engine' => 'PrintEngine.asmx',
      'service' => 'GetDetectScript',
    ),
  );

  foreach ($services as $service_name => $definition) {
    if ($service_name == $requested_service) {
      $service_definition = $definition;
    }
  }
  if (empty($service_definition)) {
    return FALSE;
  }

  if ($process) {
    return clip_process($service_definition);
  }
  else {
    return $options;
  }
}

/**
 * @param array $options
 *   Formatted array containing the definition of the CLIP API service to be
 *   called.
 *
 * @return
 *   Formatted XML object ready for ingestion.
 */
function clip_process($options) {
  $domain = (variable_get('clipapi_environment', 'prod') == 'prod') ? 'http://insight.coupons.com/COS20/' : 'http://clip.pdn.coupons.com/COS20/';
  $service = implode('/', $options['service']);
  $url = url($domain . $service, $options['options']);
  $xml = file_get_contents($url);
  $xml = simplexml_load_string($xml);
  $xml = clipapi_decode($xml);
  return $xml;
}
