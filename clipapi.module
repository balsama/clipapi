<?php
  // show errors
  if (!defined('E_STRICT')) { define('E_STRICT', 2048); } // E_STRICT isn't defined in PHP 4
  error_reporting(E_ALL | E_STRICT);
  ini_set('display_errors', '1');         //
  ini_set('display_startup_errors', '1'); //
  ini_set('track_errors', '1');           // store last error in $php_errormsg
  ini_set('html_errors', '0');            // don't output html links in error messages
  ini_set('log_errors', '1');
  ini_set('error_log', dirname(__FILE__) . '/_php_error.log');
  // end: show errors

include('includes/clipapi.cipher.inc');

/**
 * Implements hook_menu()
 */
function clipapi_menu() {
  $items['admin/settings/clipapi'] = array(
    'title' => 'CLIP API',
    'description' => 'Configure CLIP cipher and account variables',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clipapi_admin'),
    'access arguments' => array('administer clip api'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/clipapi.admin.inc',
  );
  $items['admin/settings/clipapi/settings'] = array(
    'title' => 'CLIP API',
    'description' => 'Configure CLIP cipher and account variables',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clipapi_admin'),
    'access arguments' => array('administer clip api'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/clipapi.admin.inc',
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function clipapi_perm() {
  return array('administer clip api');
}

/**
 *
 * Calls clip options which calls CLIP API and formats and returns the results.
 */
function clipapi_get($service, $args = NULL) {
  $service = check_plain($service);
  if (empty($service)) {
    $contents = format_xml_elements(array('error' => 'Please specify a service'));
  }
  $contents = clip_options($service, TRUE, $args);
  if ($contents == FALSE) {
    $contents = format_xml_elements(array('error' => 'Unsupported Service'));
    watchdog('CLIP API', 'Unsupported service called: @service', array('@service' => $service));
  }
  return $contents;
}

/**
 * @param string $requested_service
 *   Valid CLIP API service to call, e.g 'GetOffers'.
 * @param boolean $process
 *   (optional) Whether or not to actually make the call to the API or just
 *   return the definition of the service.
 *
 * @return
 *   Definition of the service if $process is set to false, else calls the
 *   clip_process() function.
 */
function clip_options($requested_service, $process = TRUE, $args = NULL) {
  include_once('includes/clipapi.services.inc');
  $services = clipapi_services($args);

  foreach ($services as $service_name => $definition) {
    if ($service_name == $requested_service) {
      $service_definition = $definition;
    }
  }
  if (empty($service_definition)) {
    return FALSE;
  }

  if ($process) {
    return clip_process($service_definition);
  }
  else {
    return $options;
  }
}

/**
 * @param array $options
 *   Formatted array containing the definition of the CLIP API service to be
 *   called.
 *
 * @return
 *   Formatted XML object ready for ingestion.
 */
function clip_process($options) {
  // Contruct API URL
  $domain = (variable_get('clipapi_environment', 'prod') == 'prod') ? 'http://insight.coupons.com/COS20/' : 'http://clip.pdn.coupons.com/COS20/';
  $service = implode('/', $options['service']);
  $url = url($domain . $service, $options['options']);
  dpm($url);

  // HTTP GET
  $results = drupal_http_request($url, array(), 'GET', NULL, 10);

  // The response is in data
  //
  // @todo
  //   check response code and throw error if not ok
  $response = $results->data;

  // I have no idea why, but their decode function returns gibberish if we
  // don't run the reponse through simplexml first (thanks for your support
  // coupons inc).
  $response = simplexml_load_string($response);
  $response = clipapi_decode($response);

  // Their api returns XML labeled as utf-16, but it contains utf-8 characters.
  // Do we convert the provided utf-8 to utf-16 since it's labeled that way and
  // will throw errors otherwise
  $response = mb_convert_encoding($response, 'utf-16', 'utf-8');

  // Now we finally have a properly encoded, decrypted string that we can
  // convert into an object.
  $response = simplexml_load_string($response);

  // Before returning, we convert the object into a nice array
  return clipapi_objtoarr($response);
}

function clipapi_objtoarr ($object) {
  return @json_decode(@json_encode($object),1);
}
